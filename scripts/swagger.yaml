openapi: 3.0.1
info:
  title: "REST API to TON Console"
  version: 0.0.1
  contact:
    name: "Support"
    email: "contact@tonaps.org"

servers:
  - url: "http://localhost:8888"

paths:
  /api/v1/auth/tg:
    post:
      summary: "Auth via telegram"
      description: "The token is recorded in the database and in the user's cookies. 
      If the user logs in under different browsers, then each authorization will have its own token."
      operationId: authViaTG
      tags:
        - auth
      requestBody:
        $ref: "#/components/requestBodies/TgAuthInput"
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/auth/ton-proof/generate_payload:
    post:
      summary: "Generate payload for TON Connect"
      operationId: authGeneratePayload
      tags:
        - auth
      responses:
        '200':
          $ref: '#/components/responses/GeneratePayload'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/auth/ton-proof/check_proof:
    post:
      summary: "Auth via TON Connect"
      description: "The token is recorded in the database and in the user's cookies. 
      If the user logs in under different browsers, then each authorization will have its own token."
      operationId: authViaTonConnect
      tags:
        - auth
      requestBody:
        $ref: "#/components/requestBodies/TonProofInput"
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  
  /api/v1/account/logout:
    post:
      summary: "Logout from the system"
      description: "After logout, the user's token is deleted"
      operationId: accountLogout
      security:
        - JWTAuth: [ "common" ]
      tags:
        - account
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  
  /api/v1/tiers:
    get:
      summary: "Get active tiers"
      operationId: getTiers
      security:
        - JWTAuth: [ "common" ]
      tags:
        - tier
      responses:
        '200':
          $ref: '#/components/responses/Tiers'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  
  /api/v1/project:
    post:
      summary: "Create project"
      operationId: createProject
      security:
        - JWTAuth: [ "common" ]
      tags:
        - project
      requestBody:
        $ref: "#/components/requestBodies/ProjectInputCreate"
      responses:
        '201':
          $ref: '#/components/responses/ProjectCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/projects:
    get:
      summary: "Get user's project"
      operationId: getProjects
      security:
        - JWTAuth: [ "common" ]
      tags:
        - project
      responses:
        '200':
          $ref: '#/components/responses/Projects'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/project/{id}:
    patch:
      summary: "Update user project"
      description: "You need to pass only those fields that need to be changed."
      operationId: updateProject
      security:
        - JWTAuth: [ "common" ]
      tags:
        - project
      parameters:
        - $ref: '#/components/parameters/projectID'
      requestBody:
        $ref: "#/components/requestBodies/ProjectInputUpdate"
      responses:
        '200':
          $ref: '#/components/responses/ProjectUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: "Delete user project"
      operationId: deleteProject
      security:
        - JWTAuth: [ "common" ]
      tags:
        - project
      parameters:
        - $ref: '#/components/parameters/projectID'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/v1/project/{id}/generate/token:
    post:
      summary: "Generate project token"
      operationId: generateProjectToken
      security:
        - JWTAuth: [ "common" ]
      tags:
        - project
      parameters:
        - $ref: '#/components/parameters/projectID'
      responses:
        '201':
          $ref: '#/components/responses/TokenCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/project/{id}/token/{token_id}:
    delete:
      summary: "Delete project token"
      operationId: deleteProjectToken
      security:
        - JWTAuth: [ "common" ]
      tags:
        - project
      parameters:
        - $ref: '#/components/parameters/projectID'
        - $ref: '#/components/parameters/tokenID'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  parameters:
    tokenID:
      description: Token ID
      in: path
      name: token_id
      required: true
      schema:
        type: integer
        format: int64
    projectID:
      description: Project ID
      in: path
      name: id
      required: true
      schema:
        type: integer
        format: int64
  
  requestBodies:
    TgAuthInput:
      description: "Data that is expected from Telegram"
      content:
        application/json:
          schema:
            type: object
            required:
              - id
              - hash
              - auth_date
            properties:
              id:
                type: integer
                format: int64
                example: 1261871881
              first_name:
                type: string
                example: "Test"
              photo_url:
                type: string
                example: "Testov"
              username:
                type: string
                example: "testov"
              hash:
                type: string
                example: "cd0e201bf7328535343301f428e51f01084a3e2a3822f4843d86b540bbebfe15"
              auth_date:
                type: integer
                format: int64
                example: 1678275313
    TonProofInput:
      description: "Data that is expected from TON Connect"
      content:
        application/json:
          schema:
            type: object
            required:
              - address
              - proof
            properties:
              address:
                type: string
                example: "0:97146a46acc2654y27947f14c4a4b14273e954f78bc017790b41208b0043200b"
              proof:
                type: object
                properties:
                  timestamp:
                    type: integer
                    format: int64
                    example: "1678275313"
                  domain:
                    type: object
                    properties:
                      length_bytes:
                        type: integer
                        format: uint32
                      value:
                        type: string
                  signature:
                    type: string
                  payload:
                    type: string
                    example: "84jHVNLQmZsAAAAAZB0Zryi2wqVJI-KaKNXOvCijEi46YyYzkaSHyJrMPBMOkVZa"
                  state_init:
                    type: string
    ProjectInputCreate:
      description: "Data that is expected"
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                example: "Test Project"
              image:
                type: string
                format: binary
    ProjectInputUpdate:
      description: "Data that is expected"
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Test Project"
              tier_id:
                type: integer
                format: int64
                example: 1
              image:
                description: "If you want to delete a avatar, put null in the image field."
                type: string
                nullable: true
                format: binary

  schemas:
    Ok:
      type: object
      required:
        - ok
      properties:
        ok:
          type: boolean
          example: true
    Error:
      type: object
      required:
        - error
        - code
      properties:
        error:
          type: string
          description: "Error message"
        code:
          type: integer
          description: "backend error code"
          enum: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ]
          x-enum-varnames: [ ErrorUnknown, ErrorInternal, ErrorBadRequest,
                             ErrorCheckPayload, ErrorVerificationProof, ErrorVerificationTg,
                             ErrorAuthUser, ErrorBannedUser, ErrorLogoutUser, ErrorCreateProject,
                             ErrorGetProject, ErrorUpdateProject, ErrorDeleteProject,
                             ErrorProjectWithoutTier, ErrorGetTiers, ErrorInsufficientFunds ]
    User:
      type: object
      required:
        - id
        - is_ban
        - date_create
      properties:
        id:
          type: integer
          format: int64
          example: "1464363297"
        tg_id:
          type: integer
          format: int64
          example: "1260831881"
          description: "ID from the Telegram service"
        wallet_address:
          type: string
          example: "0:97146a46acc2654y27947f14c4a4b14273e954f78bc017790b41208b0043200b"
          description: "TON wallet address"
        first_name:
          type: string
          example: "Test"
        last_name:
          type: string
          example: "Testov"
        avatar:
          type: string
          example: "https://test.io/my_face.png"
        is_ban:
          type: boolean
          default: false
          example: false
        token:
          type: string
          description: "Authorization token"
        date_create:
          type: integer
          format: int64
          example: 1678275313
    Tier:
      type: object
      required:
        - id
        - name
        - rpc
        - burst
        - ton_price
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Test tier"
        burst:
          type: integer
          example: 1
        rpc:
          type: number
          example: 5
        ton_price:
          description: "The price is in nano tons"
          type: integer
          format: int64
          example: 1000000000
    AppTier:
      type: object
      required:
        - id
        - name
        - rpc
        - burst
        - ton_price
        - active
        - date_create
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Test tier"
        burst:
          type: integer
          example: 1
        rpc:
          type: number
          example: 5
        ton_price:
          type: integer
          example: 100
        active:
          type: boolean
          example: true
        date_create:
          type: string
          example: "2023-03-23"
    Project:
      type: object
      required:
        - id
        - name
        - avatar
        - active
        - date_create
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Test project"
        tonapi_tier:
          $ref: '#/components/schemas/AppTier'
        tonapi_tokens:
          type: array
          items:
            $ref: '#/components/schemas/Token'
        avatar:
          type: string
          example: "https://tonapi.io/static/test.png"
        date_create:
          type: string
          example: "2023-03-23"
    Token:
      type: object
      required:
        - id
        - blocked
        - token
        - date_create
      properties:
        id:
          type: integer
          format: int64
          example: 1
        token:
          type: string
          example: "AE5TZRWIIOR2O2YAAAAGFP2HEWFZJYBP222A567CBF6JIL7S4RIZSCOAZRZOEW7AKMRICGQ"
        date_create:
          type: string
          example: "2023-03-23"
  
  responses:
    NotFound:
      description: "The specified resource was not found"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: "Something went wrong on server side"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: "Something went wrong on client side"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedError:
      description: "Access token is missing or invalid"
    Ok:
      description: "Ok"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ok'
    TokenCreated:
      description: "Token has been created"
      content:
        application/json:
          schema:
            type: object
            required:
              - project
            properties:
              token:
                type: string
                example: "AE5TZRWIAAAAAAAAAAADIABPI6PKEZ2W6TIKPNEIMNIZF6LMAXTXHWLTK3OXRIXC62AUWWQ"
    ProjectCreated:
      description: "Project has been created"
      content:
        application/json:
          schema:
            type: object
            required:
              - project
            properties:
              project:
                $ref: '#/components/schemas/Project'
    ProjectUpdated:
      description: "Project has been updated"
      content:
        application/json:
          schema:
            type: object
            required:
              - project
            properties:
              project:
                $ref: '#/components/schemas/Project'
    GeneratePayload:
      description: "Payload for TON Connect"
      content:
        application/json:
          schema:
            type: object
            required:
              - payload
            properties:
              payload:
                type: string
                example: "84jHVNLQmZsAAAAAZB0Zryi2wqVJI-KaKNXOvCijEi46YyYzkaSHyJrMPBMOkVZa"
    Tiers:
      description: "Active tiers"
      content:
        application/json:
          schema:
            required:
              - items
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Tier'
    Projects:
      description: "User projects"
      content:
        application/json:
          schema:
            required:
              - items
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
  
  securitySchemes:
    JWTAuth:
      description: "JWT token authorization"
      type: http
      scheme: bearer
      bearerFormat: JWT
